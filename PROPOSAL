

PROPOSAL AND GUIDELINES FOR QLISP:

The basics of Qlisp are done, the language is made. However the language does not support variables. This can be very easily hacked together, but I would like to remake it while it is still small, so it can be done it a better, more planned out manner.



This will not start out written out planned out, I will write things as I remember them.

TYPES OF DATA:

There will be no int, double, etc.

Everything has a type. 

The only types:

1. NUMBERS

def. Anything that starts with [0-9] or a ., and if a dot is there it must have numbers after it. A number may end in _ to detonate a repeating patten, it may have up to two _ to represent the start and end of the pattern. Otherwise the start of the pattern is the decimal. 

ex. 3 1234 3.14 5203002 4442 22 41412.41241243242142134321432

invalid. 324214. .33333333x  two (423)

2. VARIABLES

def. Anything that is a combination of letters and numbers, that must not have only numbers, and must not end in a period. They can not start with '. They cannot have " in them. They cannot be valid numbers.

ex. a i a2 232fewf !@$@^)&@ this.a

invalid. notavar. 25234  (varnamerewreqwreqw242423421) 'lol


3. EXPRESSIONS


def. Anything that starts with ( and ends with ). Thats it. The expression itself does not have to be valid for it to be of the type expression.

ex. (+ 2 2) () (532) (print) (") (((())))

invalid (). +(35    (()   435345 554 (((())ee

4. NAMESPACES

def. The same rules as a variable, but it must end in a period. This is the only type that can.

ex. this. io. %@TG#@. (). 1111.

5. Strings

def. Anything thats starts with a " and ends with a ".

6. DATA

def. The technical definition is anything that does not fit in the above. By logic this means anything that starts with '. data can end in a ' aswell in order to include spaces easily, but it is not required.

_________________________________________________________________________________

More info on each type.

Giving on each info.

1. Returns: (aka what it evaluates to)
2. Naming guidelines.



NUMBERS:

Returns: Itself, to lowest amount of space needed. Showing up to 10 decimal places unless a repeating patern is found, then it will show with the appropriate _ and _. The decimal place number can be changed with the namespace variable *PRECISION* , assuming that variable is a number. A repeating number will be expanded in a math context to *PRECISION* or default 10. ect. 1.6_ = 1.6666666666

Naming guidelines: Use one leading 0 before a decimal number, such as 0.3_ , use _ whenever appropriate to get the right precision. Use it as soon as possible to save characters and make numbers readable.


VARIABLES:

Returns: Whatever the variables value evaluates to. To explain...

"=" is used for setting in Qlisp, like setq in some lisps.

Qlisp >>> (= a 2)
a
Qlisp >>> (= a (+ a 2) )
a
Qlisp >>> a
4
Qlisp >>> a
4
Qlisp >>> (= a '(+ a 2) )
a
Qlisp >>> a
6
Qlisp >>> a
8
Qlisp >>> (= a "test")
a
Qlisp >>> a
"test"
Qlisp >>> (= a 124312.4324324324)
a
Qlisp >>> a
124312.432_
=====================================================================
Naming guidelines:

